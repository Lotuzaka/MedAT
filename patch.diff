 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/main/java/CustomRenderer.java b/src/main/java/CustomRenderer.java
index 8a8fe6b30c0b530497bdd8ebd9122baee0889fd8..4d49318c40fed4451007dd9aae695b0700583816 100644
--- a/src/main/java/CustomRenderer.java
+++ b/src/main/java/CustomRenderer.java
@@ -55,69 +55,81 @@ public class CustomRenderer extends DefaultTableCellRenderer {
 
     public CustomRenderer(String currentSubcategory, Set<QuestionIdentifier> pendingDeleteQuestions, Icon gearIcon) {
         this.currentSubcategory = currentSubcategory;
         this.pendingDeleteQuestions = pendingDeleteQuestions;
         this.gearIcon = gearIcon;
     }
 
     private boolean isFrageRow(int row, DefaultTableModel model) {
         // A row is a question row if the value in column 0 is a string of digits
         if (row < 0 || row >= model.getRowCount()) return false;
         Object value = model.getValueAt(row, 0);
         if (value == null) return false;
         String strValue = value.toString();
         return strValue.matches("\\d+");
     }
 
     @Override
     public Component getTableCellRendererComponent(JTable table, Object value,
             boolean isSelected, boolean hasFocus, int row, int column) {
         DefaultTableModel model = (DefaultTableModel) table.getModel();
         boolean isQuestionRow = isFrageRow(row, model);
 
         // Render figures for question rows (Figuren)
         if (isQuestionRow) {
             PolygonPanel panel = null;
+
             if (column == 1 && value instanceof FigurenGenerator.DissectedPieces) {
                 FigurenGenerator.DissectedPieces dissectedPieces = (FigurenGenerator.DissectedPieces) value;
                 panel = new PolygonPanel(dissectedPieces.rotatedPieces);
                 panel.setAssembled(false); // Display dissected pieces
+
             } else if (column == 2) {
-                if (value instanceof OptionDAO) {
+                FigurenGenerator.DissectedPieces pieces = null;
+                // Column 1 holds the DissectedPieces for this row
+                Object questionValue = model.getValueAt(row, 1);
+                if (questionValue instanceof FigurenGenerator.DissectedPieces) {
+                    pieces = (FigurenGenerator.DissectedPieces) questionValue;
+                } else if (value instanceof FigurenGenerator.DissectedPieces) {
+                    pieces = (FigurenGenerator.DissectedPieces) value;
+                }
+
+                if (pieces != null) {
+                    panel = new PolygonPanel(pieces.originalPieces);
+                    panel.setAssembled(true); // Show assembled figure from pieces
+                } else if (value instanceof OptionDAO) {
+                    // Fallback: render option shape directly
                     try {
                         Geometry shape = new WKTReader().read(((OptionDAO) value).getShapeData());
                         panel = new PolygonPanel(Collections.singletonList(shape));
                         panel.setAssembled(false);
                     } catch (ParseException e) {
                         e.printStackTrace();
                     }
-                } else if (value instanceof FigurenGenerator.DissectedPieces) {
-                    FigurenGenerator.DissectedPieces dissectedPieces = (FigurenGenerator.DissectedPieces) value;
-                    panel = new PolygonPanel(dissectedPieces.originalPieces);
-                    panel.setAssembled(true); // Fallback: assembled figure
                 }
             }
+
             if (panel != null) {
                 panel.setPreferredSize(new Dimension(200, 200));
                 return panel;
             }
         }
 
         // Always render options panel for FigurenOptionsData, regardless of subcategory
         if (!isQuestionRow && value instanceof FigurenOptionsData) {
             FigurenOptionsData data = (FigurenOptionsData) value;
             List<OptionDAO> options = data.options;
 
             JPanel optionsPanel = new JPanel();
             optionsPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 10));
             optionsPanel.setBackground(Color.WHITE);
 
             for (OptionDAO option : options) {
                 JPanel optionPanel = new JPanel(new BorderLayout());
                 optionPanel.setBackground(Color.WHITE);
                 optionPanel.setOpaque(true);
 
                 PolygonPanel shapePanel;
 
                 if ("E".equalsIgnoreCase(option.getLabel())) {
                     // Handle Option E separately as a label "X"
                     JLabel optionELabel = new JLabel("Option E: X");
 
EOF
)