 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/main/java/MedatoninDB.java b/src/main/java/MedatoninDB.java
index 89de1713ffdecc19dda48d18ebd264107fd1dd2f..f80aa600c7f5136b0a1b44503643786a2a503198 100644
--- a/src/main/java/MedatoninDB.java
+++ b/src/main/java/MedatoninDB.java
@@ -1591,50 +1591,67 @@ public class MedatoninDB extends JFrame {
         questionTable.setDefaultRenderer(Object.class, renderer);
         questionTable.setDefaultRenderer(Boolean.class, renderer);
         questionTable.setDefaultRenderer(Integer.class, renderer);
         questionTable.setDefaultRenderer(String.class, renderer);
         questionTable.setDefaultEditor(Object.class, new CustomEditor(questionTable));
 
         // After initializing your questionTable
         TableColumn korrektColumn = questionTable.getColumnModel().getColumn(3);
         korrektColumn.setCellEditor(new CustomEditor(questionTable));
 
         // Adjust the column widths after creating the table
         adjustColumnWidths(questionTable);
 
         if ("Figuren".equals(currentSubcategory)) {
             questionTable.setRowHeight(150); // Default row height for question rows
             for (int row = 0; row < questionTable.getRowCount(); row++) {
                 Object value = questionTable.getValueAt(row, 1);
                 if (value instanceof List<?>) {
                     questionTable.setRowHeight(row, 50); // Adjust height for options row
                 }
             }
         } else {
             questionTable.setRowHeight(30); // Default row height for other subcategories
         }
 
+        // Adjust question row height based on text length for Implikationen
+        if ("Implikationen".equals(currentSubcategory)) {
+            FontMetrics fm = questionTable.getFontMetrics(questionTable.getFont());
+            int lineHeight = fm.getHeight();
+            DefaultTableModel m = (DefaultTableModel) questionTable.getModel();
+            for (int row = 0; row < m.getRowCount(); row++) {
+                if (isFrageRow(row, m)) {
+                    Object textObj = m.getValueAt(row, 1);
+                    if (textObj instanceof String) {
+                        int lines = ((String) textObj).split("\\n").length;
+                        int height = lineHeight * lines + 10;
+                        questionTable.setRowHeight(row, Math.max(30, height));
+                    }
+                }
+            }
+        }
+
         // Add listeners for synchronizing with text fields and other interactions
         addTableListeners(questionTable);
 
         // Dynamically show or hide the "Set" column based on the category
         if (isSetColumnNotVisible(category)) {
             hideSetColumn(); // Hide the "Set" column
         } else {
             showSetColumn(); // Show the "Set" column
         }
 
         questionTable.addMouseListener(new MouseAdapter() {
             @Override
             public void mousePressed(MouseEvent e) {
                 int row = questionTable.rowAtPoint(e.getPoint());
                 int col = questionTable.columnAtPoint(e.getPoint());
 
                 if (col != 3 || !isFrageRow(row, (DefaultTableModel) questionTable.getModel())) {
                     pendingDeleteQuestions.clear();
                     questionTable.repaint();
                 }
             }
         });
 
         // Add TableModelListener to repaint the table when checkbox changes
         tableModel.addTableModelListener(e -> {
diff --git a/src/main/java/MedatoninDB.java b/src/main/java/MedatoninDB.java
index 89de1713ffdecc19dda48d18ebd264107fd1dd2f..f80aa600c7f5136b0a1b44503643786a2a503198 100644
--- a/src/main/java/MedatoninDB.java
+++ b/src/main/java/MedatoninDB.java
@@ -3399,50 +3416,53 @@ public class MedatoninDB extends JFrame {
                     debugLog("DB", "Found subcategory ID: " + id);
                     return id;
                 }
             }
         }
         debugLog("DB", "Subcategory not found");
         return -1; // Return -1 if subcategory not found
     }
 
     private void saveSubcategoryToDatabase(String category, String subcategoryName) {
         String sql = "INSERT INTO subcategories (name, category_id, order_index) VALUES (?, ?, ?)";
         try (PreparedStatement stmt = conn.prepareStatement(sql)) {
             int categoryId = getCategoryID(category);
             int orderIndex = subcategoryOrder.get(category).size() - 1; // New subcategory is added at the end
             stmt.setString(1, subcategoryName);
             stmt.setInt(2, categoryId);
             stmt.setInt(3, orderIndex);
             stmt.executeUpdate();
             System.out.println("Saved new subcategory to database: " + subcategoryName);
         } catch (SQLException e) {
             e.printStackTrace();
         }
     }
 
     private void updateQuestion(int row, int column, Object data) {
+        if (row < 0 || row >= questionTable.getRowCount()) {
+            return; // Safety check
+        }
         Object questionNumberObj = questionTable.getValueAt(row, 0);
         int questionNumber;
         try {
             questionNumber = Integer.parseInt(questionNumberObj.toString());
         } catch (NumberFormatException e) {
             System.out.println("Error parsing question number in updateQuestion.");
             return;
         }
         try {
             switch (column) {
                 case 1: // Question text
                     questionDAO.updateQuestionText(currentCategory, currentSubcategory, questionNumber, (String) data,
                             selectedSimulationId);
                     break;
                 case 2: // Checkbox state (if applicable)
                     // Implement if needed
                     break;
                 case 4: // Difficulty
                     questionDAO.updateQuestionDifficulty(
                             getSubcategoryId(currentCategory, currentSubcategory),
                             questionNumber,
                             (String) data,
                             selectedSimulationId);
                     break;
             }
 
EOF
)