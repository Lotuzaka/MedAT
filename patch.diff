 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/main/java/MedatoninDB.java b/src/main/java/MedatoninDB.java
index fa892e5d2c07b7e64c8d52308b03c9d94a473bc9..ddc0d7c06f86bd9504434761691566ad2a7d1d18 100644
--- a/src/main/java/MedatoninDB.java
+++ b/src/main/java/MedatoninDB.java
@@ -3291,57 +3291,50 @@ public class MedatoninDB extends JFrame {
             JOptionPane.showMessageDialog(this, "Error saving solution document: " + e.getMessage(), "Error",
                     JOptionPane.ERROR_MESSAGE);
         }
     }
 
     // Method to print all categories and their subcategories to a single Word
     // document
     private void printAllCategories() {
         try {
             // Check if docx4j is available at runtime
             Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage");
             
             docx.Docx4jPrinter printer = new docx.Docx4jPrinter();
             
             // Load introduction pages using reflection
             java.lang.reflect.Method loadMethod = printer.getClass()
                 .getMethod("loadIntroductionPages", java.io.File.class);
             Object introPages = loadMethod.invoke(printer, new File("untertest_introductionPage.docx"));
             
             // Create document manually to avoid import issues
             java.lang.reflect.Method createMethod = Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage")
                 .getMethod("createPackage");
             Object pkg = createMethod.invoke(null);
 
             for (String category : categoryModels.keySet()) {
-                Integer catIndex = INTRO_PAGE_INDEX.get(category);
-                if (catIndex != null && introPages instanceof List && catIndex < ((List<?>) introPages).size()) {
-                    java.lang.reflect.Method appendMethod = printer.getClass()
-                        .getMethod("appendPage", Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage"), List.class);
-                    appendMethod.invoke(printer, pkg, ((List<?>) introPages).get(catIndex));
-                }
-
                 Map<String, DefaultTableModel> subcats = categoryModels.get(category);
                 for (String subcat : subcategoryOrder.get(category)) {
                     Integer pageIdx = INTRO_PAGE_INDEX.get(subcat);
                     if (pageIdx != null && introPages instanceof List && pageIdx < ((List<?>) introPages).size()) {
                         java.lang.reflect.Method appendMethod = printer.getClass()
                             .getMethod("appendPage", Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage"), List.class);
                         appendMethod.invoke(printer, pkg, ((List<?>) introPages).get(pageIdx));
                     }
 
                     DefaultTableModel model = subcats.get(subcat);
                     if (model != null && model.getRowCount() > 0) {
                         // Add questions using reflection
                         java.lang.reflect.Method addQuestionsMethod = printer.getClass()
                             .getMethod("addQuestions", Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage"), DefaultTableModel.class);
                         addQuestionsMethod.invoke(printer, pkg, model);
                         
                         // Add page break using reflection
                         java.lang.reflect.Method addPageBreakMethod = printer.getClass()
                             .getMethod("addPageBreak", Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage"));
                         addPageBreakMethod.invoke(printer, pkg);
                     }
                 }
             }
 
             // Save the document using reflection with conflict resolution
 
EOF
)