 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/main/java/MedatoninDB.java b/src/main/java/MedatoninDB.java
index 6732f74c15d1154e7075cf26e126662f7a88bd63..78fef373bdd99749b49ed36f21cb793e93cc8aed 100644
--- a/src/main/java/MedatoninDB.java
+++ b/src/main/java/MedatoninDB.java
@@ -3042,64 +3042,78 @@ public class MedatoninDB extends JFrame {
             pageMar.setTop(java.math.BigInteger.valueOf(850));
             pageMar.setBottom(java.math.BigInteger.valueOf(850));
             pageMar.setLeft(java.math.BigInteger.valueOf(1134));
             pageMar.setRight(java.math.BigInteger.valueOf(1134));
             
             debugLog("Print", LogLevel.INFO, "Set page margins: Top/Bottom=1.5cm, Left/Right=2cm");
         } catch (Exception e) {
             debugLog("Print", LogLevel.ERROR, "Error setting page margins: " + e.getMessage());
         }
     }
 
     // Method to print the current category to a Word document
     private void printCategory(String category) {
         Map<String, DefaultTableModel> subcategories = categoryModels.get(category);
         if (subcategories == null) {
             JOptionPane.showMessageDialog(this, "No data available for category: " + category, "Error",
                     JOptionPane.ERROR_MESSAGE);
             return;
         }
 
         try {
             // Check if docx4j is available at runtime
             Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage");
             
             docx.Docx4jPrinter printer = new docx.Docx4jPrinter();
+
+            // Load introduction pages from the static DOCX file
+            java.lang.reflect.Method loadMethod = printer.getClass()
+                .getMethod("loadIntroductionPages", java.io.File.class);
+            Object introPages = loadMethod.invoke(printer, new File("untertest_introductionPage.docx"));
+
             // Create document manually to avoid import issues
             java.lang.reflect.Method createMethod = Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage")
                 .getMethod("createPackage");
             Object pkg = createMethod.invoke(null);
             
             // Process each subcategory
             java.util.List<String> subcatList = subcategoryOrder.get(category);
             for (int i = 0; i < subcatList.size(); i++) {
                 String subcategory = subcatList.get(i);
                 DefaultTableModel model = subcategories.get(subcategory);
                 if (model == null || model.getRowCount() == 0) {
                     continue; // Skip empty subcategories
                 }
 
+                // Insert introduction page for this subcategory if available
+                Integer pageIdx = INTRO_PAGE_INDEX.get(subcategory);
+                if (pageIdx != null && introPages instanceof java.util.List && pageIdx < ((java.util.List<?>) introPages).size()) {
+                    java.lang.reflect.Method appendMethod = printer.getClass()
+                        .getMethod("appendPage", Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage"), java.util.List.class);
+                    appendMethod.invoke(printer, pkg, ((java.util.List<?>) introPages).get(pageIdx));
+                }
+
                 // Add questions using reflection to avoid import issues
                 java.lang.reflect.Method addQuestionsMethod = printer.getClass()
                     .getMethod("addQuestions", Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage"), DefaultTableModel.class);
                 addQuestionsMethod.invoke(printer, pkg, model);
 
                 // Add stop sign page using reflection
                 java.lang.reflect.Method addStopSignMethod = printer.getClass()
                     .getMethod("addStopSignPage", Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage"));
                 addStopSignMethod.invoke(printer, pkg);
 
                 // Remove potential trailing page break from questions
                 // (stop sign page will handle page separation)
             }
 
             // Save the document using reflection with conflict resolution
             String baseFileName = category + ".docx";
             File outputFile = new File(baseFileName);
             
             // If file is in use, try alternative names
             int counter = 1;
             while (!canWriteToFile(outputFile)) {
                 String fileName = category + "_" + counter + ".docx";
                 outputFile = new File(fileName);
                 counter++;
                 
diff --git a/src/main/java/MedatoninDB.java b/src/main/java/MedatoninDB.java
index 6732f74c15d1154e7075cf26e126662f7a88bd63..78fef373bdd99749b49ed36f21cb793e93cc8aed 100644
--- a/src/main/java/MedatoninDB.java
+++ b/src/main/java/MedatoninDB.java
@@ -3144,64 +3158,78 @@ public class MedatoninDB extends JFrame {
                     }
                 }
             }
             System.out.println("=== END CATEGORY ===");
         } catch (Exception e) {
             e.printStackTrace();
             JOptionPane.showMessageDialog(this, "Error saving document: " + e.getMessage(), "Error",
                     JOptionPane.ERROR_MESSAGE);
         }
     }
 
     // Method to print the solution document for the current category
     private void printCategorySolution(String category) {
         Map<String, DefaultTableModel> subcategories = categoryModels.get(category);
         if (subcategories == null) {
             JOptionPane.showMessageDialog(this, "No data available for category: " + category, "Error",
                     JOptionPane.ERROR_MESSAGE);
             return;
         }
 
         try {
             // Check if docx4j is available at runtime
             Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage");
             
             docx.Docx4jPrinter printer = new docx.Docx4jPrinter();
+
+            // Load introduction pages
+            java.lang.reflect.Method loadMethod = printer.getClass()
+                .getMethod("loadIntroductionPages", java.io.File.class);
+            Object introPages = loadMethod.invoke(printer, new File("untertest_introductionPage.docx"));
+
             // Create document manually to avoid import issues
             java.lang.reflect.Method createMethod = Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage")
                 .getMethod("createPackage");
             Object pkg = createMethod.invoke(null);
             
             // Process each subcategory
             java.util.List<String> subcatList = subcategoryOrder.get(category);
             for (int i = 0; i < subcatList.size(); i++) {
                 String subcategory = subcatList.get(i);
                 DefaultTableModel model = subcategories.get(subcategory);
                 if (model == null || model.getRowCount() == 0) {
                     continue; // Skip empty subcategories
                 }
 
+                // Insert introduction page for this subcategory if available
+                Integer pageIdx = INTRO_PAGE_INDEX.get(subcategory);
+                if (pageIdx != null && introPages instanceof java.util.List && pageIdx < ((java.util.List<?>) introPages).size()) {
+                    java.lang.reflect.Method appendMethod = printer.getClass()
+                        .getMethod("appendPage", Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage"), java.util.List.class);
+                    appendMethod.invoke(printer, pkg, ((java.util.List<?>) introPages).get(pageIdx));
+                }
+
                 // Add solutions using reflection to avoid import issues
                 java.lang.reflect.Method addSolutionsMethod = printer.getClass()
                     .getMethod("addQuestionsSolution", Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage"), DefaultTableModel.class);
                 addSolutionsMethod.invoke(printer, pkg, model);
 
                 // Add stop sign page using reflection
                 java.lang.reflect.Method addStopSignMethod = printer.getClass()
                     .getMethod("addStopSignPage", Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage"));
                 addStopSignMethod.invoke(printer, pkg);
 
                 // Stop sign already starts a new page; no extra break needed
             }
 
             // Save the document using reflection with conflict resolution
             String baseFileName = category + "_Solutions.docx";
             File outputFile = new File(baseFileName);
             
             // If file is in use, try alternative names
             int counter = 1;
             while (!canWriteToFile(outputFile)) {
                 String fileName = category + "_Solutions_" + counter + ".docx";
                 outputFile = new File(fileName);
                 counter++;
                 
                 // Prevent infinite loop
diff --git a/src/main/java/MedatoninDB.java b/src/main/java/MedatoninDB.java
index 6732f74c15d1154e7075cf26e126662f7a88bd63..78fef373bdd99749b49ed36f21cb793e93cc8aed 100644
--- a/src/main/java/MedatoninDB.java
+++ b/src/main/java/MedatoninDB.java
@@ -3358,71 +3386,84 @@ public class MedatoninDB extends JFrame {
                             Object questionText = model.getValueAt(i, 1);
                             if (questionText != null) {
                                 System.out.println("    Question " + (i + 1) + ": " + questionText);
                             }
                         }
                     }
                 }
                 System.out.println(""); // Empty line between categories
             }
             System.out.println("=== END ALL CATEGORIES ===");
         } catch (Exception e) {
             e.printStackTrace();
             JOptionPane.showMessageDialog(this, "Error saving document: " + e.getMessage(), "Error",
                     JOptionPane.ERROR_MESSAGE);
         }
     }
 
     // Method to print all categories and their subcategories to a single solution
     // Word document
     private void printAllCategoriesSolution() {
         try {
             // Check if docx4j is available at runtime
             Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage");
             
             docx.Docx4jPrinter printer = new docx.Docx4jPrinter();
-            
+
+            // Load introduction pages for all subcategories
+            java.lang.reflect.Method loadMethod = printer.getClass()
+                .getMethod("loadIntroductionPages", java.io.File.class);
+            Object introPages = loadMethod.invoke(printer, new File("untertest_introductionPage.docx"));
+
             // Create document manually to avoid import issues
             java.lang.reflect.Method createMethod = Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage")
                 .getMethod("createPackage");
             Object pkg = createMethod.invoke(null);
 
             // Iterate over all categories
             java.util.List<String> categoryList = new java.util.ArrayList<>(categoryModels.keySet());
             for (int c = 0; c < categoryList.size(); c++) {
                 String category = categoryList.get(c);
                 Map<String, DefaultTableModel> subcategories = categoryModels.get(category);
 
                 // Iterate over subcategories without category/subcategory headings
                 java.util.List<String> subcatList = subcategoryOrder.get(category);
                 for (int i = 0; i < subcatList.size(); i++) {
                     String subcategory = subcatList.get(i);
                     DefaultTableModel model = subcategories.get(subcategory);
                     if (model == null || model.getRowCount() == 0) {
                         continue; // Skip empty subcategories
                     }
 
+                    // Insert introduction page for this subcategory if available
+                    Integer pageIdx = INTRO_PAGE_INDEX.get(subcategory);
+                    if (pageIdx != null && introPages instanceof java.util.List && pageIdx < ((java.util.List<?>) introPages).size()) {
+                        java.lang.reflect.Method appendMethod = printer.getClass()
+                            .getMethod("appendPage", Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage"), java.util.List.class);
+                        appendMethod.invoke(printer, pkg, ((java.util.List<?>) introPages).get(pageIdx));
+                    }
+
                     // Add questions with solutions using reflection
                     java.lang.reflect.Method addQuestionsSolutionMethod = printer.getClass()
                         .getMethod("addQuestionsSolution", Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage"), DefaultTableModel.class);
                     addQuestionsSolutionMethod.invoke(printer, pkg, model);
 
                     // Add stop sign page using reflection
                     java.lang.reflect.Method addStopSignMethod = printer.getClass()
                         .getMethod("addStopSignPage", Class.forName("org.docx4j.openpackaging.packages.WordprocessingMLPackage"));
                     addStopSignMethod.invoke(printer, pkg);
 
                     // Next introduction page already begins on a new page
                 }
             }
 
             // Save the document using reflection with conflict resolution
             String baseFileName = "All_Categories_Solutions.docx";
             File outputFile = new File(baseFileName);
             
             // If file is in use, try alternative names
             int counter = 1;
             while (!canWriteToFile(outputFile)) {
                 String fileName = "All_Categories_Solutions_" + counter + ".docx";
                 outputFile = new File(fileName);
                 counter++;
                 
 
EOF
)