 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/main/java/MedatoninDB.java b/src/main/java/MedatoninDB.java
index d47ca30c96d7375f3f04a1d44fd90173c1137788..2f91113e67103dae20527fd78c84231b8b2b925b 100644
--- a/src/main/java/MedatoninDB.java
+++ b/src/main/java/MedatoninDB.java
@@ -3426,52 +3426,62 @@ public class MedatoninDB extends JFrame {
     }
 
     private void loadFigurenQuestionIntoModel(DefaultTableModel model, QuestionDAO question, OptionDAO optionDAO) {
         try {
             WKTReader wktReader = new WKTReader();
             List<Geometry> dissectedPiecesList = new ArrayList<>();
             for (String pieceWKT : question.getDissectedPiecesData().split(";")) {
                 dissectedPiecesList.add(wktReader.read(pieceWKT));
             }
             List<Geometry> assembledPiecesList = new ArrayList<>();
             for (String wkt : question.getAssembledPiecesData().split(";")) {
                 if (!wkt.trim().isEmpty()) assembledPiecesList.add(wktReader.read(wkt));
             }
             FigurenGenerator.DissectedPieces dissectedPieces = new FigurenGenerator.DissectedPieces(
                 dissectedPiecesList, dissectedPiecesList, assembledPiecesList);
 
             // Show dissected pieces as shapes (object) in the 'Text' column
             List<OptionDAO> options = optionDAO.getOptionsForQuestion(question.getId());
             OptionDAO correctOption = null;
             for (OptionDAO option : options) {
                 if (option.isCorrect()) {
                     correctOption = option;
                     break;
                 }
             }
+            // Use the stored difficulty if available
+            String difficulty = question.getDifficulty();
+            if (difficulty == null || difficulty.trim().isEmpty()) {
+                difficulty = "MEDIUM";
+            }
             model.addRow(new Object[] {
-                String.valueOf(question.getQuestionNumber()), dissectedPieces, correctOption, false, "Kurz", "MEDIUM"
+                String.valueOf(question.getQuestionNumber()),
+                dissectedPieces,
+                correctOption,
+                false,
+                "Kurz",
+                difficulty
             });
 
             // Option panel: only show options in grey, no solution
             FigurenOptionsData figurenOptionsData = new FigurenOptionsData(options, dissectedPieces);
             model.addRow(new Object[] { "", figurenOptionsData, "", false, "" });
         } catch (Exception e) {
             debugLog("DB", "Error loading Figuren question ID " + question.getId() + ": " + e.getMessage());
             e.printStackTrace();
         }
     }
 
     private Map<String, DefaultTableModel> loadSubcategoriesFromDatabase(int categoryId) {
         Map<String, DefaultTableModel> subcategories = new LinkedHashMap<>();
         String sql = "SELECT name FROM subcategories WHERE category_id = ? ORDER BY order_index";
 
         try (PreparedStatement stmt = conn.prepareStatement(sql)) {
             stmt.setInt(1, categoryId);
             try (ResultSet rs = stmt.executeQuery()) {
                 while (rs.next()) {
                     String subcategoryName = rs.getString("name");
                     debugLog("DB", "Loaded subcategory: " + subcategoryName);
                     DefaultTableModel model = createTableModel();
                     subcategories.put(subcategoryName, model);
                 }
             }
 
EOF
)