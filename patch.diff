 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/main/java/docx/Docx4jPrinter.java b/src/main/java/docx/Docx4jPrinter.java
index 77ead639ab3c09e4140303b6846b0b7c8c458e2a..d89c6dbbbdc949d47dc65cf03f77d2ce756d594b 100644
--- a/src/main/java/docx/Docx4jPrinter.java
+++ b/src/main/java/docx/Docx4jPrinter.java
@@ -134,51 +134,52 @@ public class Docx4jPrinter {
                 
                 R questionR = factory.createR();
                 Text questionT = factory.createText();
                 questionT.setValue(number + ". " + questionText);
                 questionR.getContent().add(questionT);
                 questionP.getContent().add(questionR);
                 pkg.getMainDocumentPart().addObject(questionP);
 
                 // For Figuren questions, add the dissected pieces image
                 if (isFigurenQuestion) {
                     try {
                         addFigurenShapeImage(pkg, questionObj);
                     } catch (Exception e) {
                         // If image generation fails, add a text representation
                         P pieceP = factory.createP();
                         R pieceR = factory.createR();
                         Text pieceT = factory.createText();
                         pieceT.setValue("Bausteine: " + questionObj.toString());
                         pieceR.getContent().add(pieceT);
                         pieceP.getContent().add(pieceR);
                         pkg.getMainDocumentPart().addObject(pieceP);
                     }
                 }
 
                 // Add options/answers if they exist in the model
-                addQuestionOptions(pkg, model, r);
+                // Also skip option rows to avoid re-processing them
+                r = addQuestionOptions(pkg, model, r);
 
                 // For Figuren questions: no spacing between question blocks.
                 // Add page break BEFORE every 4th question.
                 if (isFigurenQuestion) {
                     // Check if this is the 4th, 7th, 10th, etc. question (before adding it)
                     if (figurenBlocksOnPage > 0 && figurenBlocksOnPage % 3 == 0) {
                         addPageBreak(pkg);
                     }
                     figurenBlocksOnPage++;
                 } else {
                     // Add spacing after non-Figuren questions
                     addSpacing(pkg);
                 }
             }
         }
     }
 
     /**
      * Add questions with solutions to the document with proper handling for
      * different question types.
      */
     public void addQuestionsSolution(WordprocessingMLPackage pkg, DefaultTableModel model) {
         int figurenBlocksOnPage = 0;  // Track Figuren question blocks on the current page
         
         for (int r = 0; r < model.getRowCount(); r++) {
diff --git a/src/main/java/docx/Docx4jPrinter.java b/src/main/java/docx/Docx4jPrinter.java
index 77ead639ab3c09e4140303b6846b0b7c8c458e2a..d89c6dbbbdc949d47dc65cf03f77d2ce756d594b 100644
--- a/src/main/java/docx/Docx4jPrinter.java
+++ b/src/main/java/docx/Docx4jPrinter.java
@@ -215,51 +216,52 @@ public class Docx4jPrinter {
                 
                 R questionR = factory.createR();
                 Text questionT = factory.createText();
                 questionT.setValue(number + ". " + questionText);
                 questionR.getContent().add(questionT);
                 questionP.getContent().add(questionR);
                 pkg.getMainDocumentPart().addObject(questionP);
 
                 // For Figuren questions, add the dissected pieces image
                 if (isFigurenQuestion) {
                     try {
                         addFigurenShapeImage(pkg, questionObj);
                     } catch (Exception e) {
                         // If image generation fails, add a text representation
                         P pieceP = factory.createP();
                         R pieceR = factory.createR();
                         Text pieceT = factory.createText();
                         pieceT.setValue("Bausteine: " + questionObj.toString());
                         pieceR.getContent().add(pieceT);
                         pieceP.getContent().add(pieceR);
                         pkg.getMainDocumentPart().addObject(pieceP);
                     }
                 }
 
                 // Add options/answers if they exist in the model
-                addQuestionOptions(pkg, model, r);
+                // Also skip option rows to avoid re-processing them
+                r = addQuestionOptions(pkg, model, r);
 
                 // Add solution if available
                 if (!solution.isEmpty()) {
                     P solutionP = factory.createP();
                     R solutionR = factory.createR();
                     Text solutionT = factory.createText();
                     solutionT.setValue("LÃ¶sung: " + solution);
                     solutionR.getContent().add(solutionT);
                     solutionP.getContent().add(solutionR);
                     pkg.getMainDocumentPart().addObject(solutionP);
                 }
 
                 // For Figuren questions: no spacing between question blocks.
                 // Add page break BEFORE every 4th question.
                 if (isFigurenQuestion) {
                     // Check if this is the 4th, 7th, 10th, etc. question (before adding it)
                     if (figurenBlocksOnPage > 0 && figurenBlocksOnPage % 3 == 0) {
                         addPageBreak(pkg);
                     }
                     figurenBlocksOnPage++;
                 } else {
                     // Add spacing after non-Figuren questions
                     addSpacing(pkg);
                 }
             }
diff --git a/src/main/java/docx/Docx4jPrinter.java b/src/main/java/docx/Docx4jPrinter.java
index 77ead639ab3c09e4140303b6846b0b7c8c458e2a..d89c6dbbbdc949d47dc65cf03f77d2ce756d594b 100644
--- a/src/main/java/docx/Docx4jPrinter.java
+++ b/src/main/java/docx/Docx4jPrinter.java
@@ -817,60 +819,65 @@ public class Docx4jPrinter {
                 // Make labels bold
                 RPr labelRPr = factory.createRPr();
                 BooleanDefaultTrue labelBold = factory.createBooleanDefaultTrue();
                 labelRPr.setB(labelBold);
                 lr.setRPr(labelRPr);
                 
                 Text lt = factory.createText();
                 lt.setValue(label); // Remove ")" from labels
                 lr.getContent().add(lt);
                 labelP.getContent().add(lr);
                 labelCell.getContent().add(labelP);
                 labelRow.getContent().add(labelCell);
             }
 
             table.getContent().add(imageRow);
             table.getContent().add(labelRow);
             pkg.getMainDocumentPart().addObject(table);
         } catch (Exception e) {
             System.out.println("Could not add Figuren option images: " + e.getMessage());
         }
     }
 
     /**
      * Add question options from the table model with vertical layout for KFF subtests and proper A-E labels.
      */
-    private void addQuestionOptions(WordprocessingMLPackage pkg, DefaultTableModel model, int startRow) {
+    /**
+     * Add question options from the table model with vertical layout for KFF subtests
+     * and proper A-E labels. Returns the last row index that was processed so the
+     * caller can skip option rows.
+     */
+    private int addQuestionOptions(WordprocessingMLPackage pkg, DefaultTableModel model, int startRow) {
         // Look for options in subsequent rows
         int currentRow = startRow + 1;
 
         // First check if this is a Figuren question with options data
         if (currentRow < model.getRowCount()) {
             Object optObj = model.getValueAt(currentRow, 1);
             if (optObj != null && optObj.getClass().getSimpleName().equals("FigurenOptionsData")) {
                 addFigurenOptionsImages(pkg, optObj);
-                return;
+                return currentRow; // Skip the FigurenOptionsData row
             }
         }
 
         java.util.List<String> optionTexts = new ArrayList<>();
         
         // Collect all options that follow this question - but ONLY process each option row ONCE
         while (currentRow < model.getRowCount()) {
             Object rowIdentifier = model.getValueAt(currentRow, 0);
             
             // Stop if we encounter another question (numeric identifier)
             if (rowIdentifier != null && rowIdentifier.toString().matches("\\d+")) {
                 break; // Next question encountered
             }
             
             // Stop if we encounter an empty identifier (end of options)
             if (rowIdentifier == null || rowIdentifier.toString().trim().isEmpty()) {
                 currentRow++;
                 continue;
             }
             
             // Check if this is an option row (should have A), B), C), D), E) or X) pattern)
             String identifier = rowIdentifier.toString().trim();
             if (identifier.matches("[A-E]\\)|X\\)")) {
                 Object optionObj = model.getValueAt(currentRow, 1);
                 if (optionObj != null) {
diff --git a/src/main/java/docx/Docx4jPrinter.java b/src/main/java/docx/Docx4jPrinter.java
index 77ead639ab3c09e4140303b6846b0b7c8c458e2a..d89c6dbbbdc949d47dc65cf03f77d2ce756d594b 100644
--- a/src/main/java/docx/Docx4jPrinter.java
+++ b/src/main/java/docx/Docx4jPrinter.java
@@ -900,50 +907,52 @@ public class Docx4jPrinter {
                 // No RPr settings for bold formatting
 
                 Text optionT = factory.createText();
 
                 // Create proper option label (A, B, C, D, E/X)
                 char optionLabel;
                 if (i == 4) { // 5th option (index 4) should be "X"
                     optionLabel = 'X';
                 } else {
                     optionLabel = (char) ('A' + i);
                 }
 
                 // Format: "A) OptionText"
                 String formattedOption = optionLabel + ") " + optionTexts.get(i);
                 optionT.setValue(formattedOption);
                 optionR.getContent().add(optionT);
                 optionP.getContent().add(optionR);
                 
                 pkg.getMainDocumentPart().addObject(optionP);
             }
 
             // Add spacing after all options
             P spacingP = factory.createP();
             pkg.getMainDocumentPart().addObject(spacingP);
         }
+
+        return currentRow - 1;
     }
 
     /**
      * Try to add stop sign image to the document.
      */
     private boolean addStopSignImage(WordprocessingMLPackage pkg, R run) {
         String[] possiblePaths = {
             "stopp_sign.png",
             "src/main/resources/images/stopp_sign.png", 
             "resources/images/stopp_sign.png",
             "images/stopp_sign.png"
         };
         
         for (String path : possiblePaths) {
             try {
                 File imageFile = new File(path);
                 if (imageFile.exists()) {
                     FileInputStream fis = new FileInputStream(imageFile);
                     byte[] imageBytes = fis.readAllBytes();
                     fis.close();
                     
                     addImageToRun(pkg, run, imageBytes, "stopp_sign.png");
                     return true;
                 }
             } catch (Exception e) {
 
EOF
)