 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/main/java/CustomRenderer.java b/src/main/java/CustomRenderer.java
index c41a09e2591d8dab794d5c608ed640901a99d269..43db0f94549e3d76ab8a835fb2e4d64367537209 100644
--- a/src/main/java/CustomRenderer.java
+++ b/src/main/java/CustomRenderer.java
@@ -1,51 +1,41 @@
 import javax.swing.*;
 import javax.swing.table.*;
 import java.awt.*;
 import java.awt.geom.Ellipse2D;
 import java.io.IOException;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.*;
 import java.util.List;
 import org.locationtech.jts.geom.*;
 import org.locationtech.jts.io.ParseException;
 import org.locationtech.jts.io.WKTReader;
 import org.locationtech.jts.awt.ShapeWriter;
 import svg.SvgBuilder;
 import util.*;
 
-// Data holder for Figuren options and dissected pieces (copied from MedatoninDB)
-class FigurenOptionsData {
-    public final List<OptionDAO> options;
-    public final FigurenGenerator.DissectedPieces dissectedPieces;
-    public FigurenOptionsData(List<OptionDAO> options, FigurenGenerator.DissectedPieces dissectedPieces) {
-        this.options = options;
-        this.dissectedPieces = dissectedPieces;
-    }
-}
-
 // Enum for question difficulty (copied from MedatoninDB)
 enum Difficulty {
     EASY(new Color(150, 190, 152), "●"),
     MEDIUM(new Color(247, 181, 127), "●●"),
     HARD(new Color(233, 151, 151), "●●●");
     public final Color color;
     public final String symbol;
     Difficulty(Color color, String symbol) {
         this.color = color;
         this.symbol = symbol;
     }
 }
 
 public class CustomRenderer extends DefaultTableCellRenderer {
     // Helper for difficulty color
     private Color getDifficultyColor(String difficulty) {
         if (difficulty == null) return Color.WHITE;
         switch (difficulty.toLowerCase()) {
             case "easy":
             case "leicht":
                 return new Color(150, 190, 152); // green
             case "medium":
             case "mittel":
                 return new Color(247, 181, 127); // orange
             case "hard":
diff --git a/src/main/java/CustomRenderer.java b/src/main/java/CustomRenderer.java
index c41a09e2591d8dab794d5c608ed640901a99d269..43db0f94549e3d76ab8a835fb2e4d64367537209 100644
--- a/src/main/java/CustomRenderer.java
+++ b/src/main/java/CustomRenderer.java
@@ -59,52 +49,52 @@ public class CustomRenderer extends DefaultTableCellRenderer {
     private final Set<QuestionIdentifier> pendingDeleteQuestions;
     private final Icon gearIcon;
 
     public CustomRenderer(String currentSubcategory, Set<QuestionIdentifier> pendingDeleteQuestions, Icon gearIcon) {
         this.currentSubcategory = currentSubcategory;
         this.pendingDeleteQuestions = pendingDeleteQuestions;
         this.gearIcon = gearIcon;
     }
 
     private boolean isFrageRow(int row, DefaultTableModel model) {
         // A row is a question row if the value in column 0 is a string of digits
         if (row < 0 || row >= model.getRowCount()) return false;
         Object value = model.getValueAt(row, 0);
         if (value == null) return false;
         String strValue = value.toString();
         return strValue.matches("\\d+");
     }
 
     @Override
     public Component getTableCellRendererComponent(JTable table, Object value,
             boolean isSelected, boolean hasFocus, int row, int column) {
         DefaultTableModel model = (DefaultTableModel) table.getModel();
         boolean isQuestionRow = isFrageRow(row, model);
 
         // Defensive: always render FigurenOptionsData panel if value is FigurenOptionsData
-        if (value instanceof FigurenOptionsData) {
-            FigurenOptionsData data = (FigurenOptionsData) value;
+        if (value instanceof MedatoninDB.FigurenOptionsData) {
+            MedatoninDB.FigurenOptionsData data = (MedatoninDB.FigurenOptionsData) value;
             List<OptionDAO> options = data.options;
 
             JPanel optionsPanel = new JPanel();
             optionsPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 10));
             optionsPanel.setBackground(Color.WHITE);
 
             for (OptionDAO option : options) {
                 JPanel optionPanel = new JPanel(new BorderLayout());
                 optionPanel.setBackground(Color.WHITE);
                 optionPanel.setOpaque(true);
 
                 PolygonPanel shapePanel;
 
                 if ("E".equalsIgnoreCase(option.getLabel())) {
                     JLabel optionELabel = new JLabel("Option E: X");
                     optionELabel.setFont(optionELabel.getFont().deriveFont(Font.BOLD));
                     optionsPanel.add(optionELabel);
                     continue;
                 }
 
                 try {
                     shapePanel = new PolygonPanel(
                             Collections.singletonList(new WKTReader().read(option.getShapeData())));
                     shapePanel.setAssembled(false);
                 } catch (ParseException e) {
 
EOF
)