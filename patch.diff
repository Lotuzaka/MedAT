 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/main/java/MedatoninDB.java b/src/main/java/MedatoninDB.java
index f11f54945de46c3e8e950a2eaefa5da960595abd..216816116bc9817b661a31a8d6844d3d718cc812 100644
--- a/src/main/java/MedatoninDB.java
+++ b/src/main/java/MedatoninDB.java
@@ -3183,64 +3183,66 @@ public class MedatoninDB extends JFrame {
             DefaultTableModel model = (DefaultTableModel) table.getModel();
 
             // Store existing A)-E) option texts and correctness states
             Map<String, String> answerTexts = new HashMap<>();
             Map<String, Boolean> answerCorrectness = new HashMap<>();
             int rowIndex = frageRow + 1;
 
             while (rowIndex < model.getRowCount() && !isFrageRow(rowIndex, model)) {
                 String label = model.getValueAt(rowIndex, 0).toString();
                 if (label.matches("[A-E]\\)")) {
                     answerTexts.put(label, model.getValueAt(rowIndex, 1).toString());
                     Object correctObj = model.getValueAt(rowIndex, 2);
                     answerCorrectness.put(label, correctObj instanceof Boolean && (Boolean) correctObj);
                 }
                 model.removeRow(rowIndex);
                 // Do not increment rowIndex; rows shift up after removal
             }
 
             // Add new rows based on the new format
             if ("Kurz".equals(newFormat)) {
                 String[] answerLabels = { "A)", "B)", "C)", "D)", "E)" };
                 for (int i = 0; i < answerLabels.length; i++) {
                     String label = answerLabels[i];
                     String text = answerTexts.getOrDefault(label, "");
                     Boolean isCorrect = answerCorrectness.getOrDefault(label, false);
-                    model.insertRow(frageRow + 1 + i, new Object[] { label, text, isCorrect, "" });
+                    model.insertRow(frageRow + 1 + i,
+                            new Object[] { label, text, "", isCorrect, "" });
                 }
             } else if ("Lang".equals(newFormat)) {
                 String[] optionLabels = { "1.", "2.", "3.", "4." };
                 String[] answerLabels = { "A)", "B)", "C)", "D)", "E)" };
                 for (int i = 0; i < optionLabels.length; i++) {
-                    model.insertRow(frageRow + 1 + i, new Object[] { optionLabels[i], "", null, "" });
+                    model.insertRow(frageRow + 1 + i,
+                            new Object[] { optionLabels[i], "", "", null, "" });
                 }
                 for (int i = 0; i < answerLabels.length; i++) {
                     String label = answerLabels[i];
                     String text = answerTexts.getOrDefault(label, "");
                     Boolean isCorrect = answerCorrectness.getOrDefault(label, false);
                     model.insertRow(frageRow + 1 + optionLabels.length + i,
-                            new Object[] { label, text, isCorrect, "" });
+                            new Object[] { label, text, "", isCorrect, "" });
                 }
             }
 
             SwingUtilities.invokeLater(() -> {
                 table.revalidate();
                 table.repaint(); // Ensure all custom rendering and styles are applied
             });
         }
 
         private void togglePendingDelete(int row) {
             DefaultTableModel model = (DefaultTableModel) questionTable.getModel();
             String questionNumber = String.valueOf(model.getValueAt(row, 0));
             QuestionIdentifier identifier = new QuestionIdentifier(currentSubcategory,
                     Integer.parseInt(questionNumber));
 
             if (pendingDeleteQuestions.contains(identifier)) {
                 // Second click - delete without confirmation
                 deleteQuestionAtRow(questionTable, row);
                 pendingDeleteQuestions.remove(identifier);
             } else {
                 // First click - highlight the question
                 pendingDeleteQuestions.add(identifier);
             }
 
             questionTable.repaint();
 
EOF
)