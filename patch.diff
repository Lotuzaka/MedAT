 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/main/java/docx/Docx4jPrinter.java b/src/main/java/docx/Docx4jPrinter.java
index 298234bf37bd20946f62ee16ad9b9c6c07146e17..83341a719890ddba9ebcb0f440f19fbdf5250878 100644
--- a/src/main/java/docx/Docx4jPrinter.java
+++ b/src/main/java/docx/Docx4jPrinter.java
@@ -320,62 +320,77 @@ public class Docx4jPrinter {
             rPr.setSz(fontSize);
             rPr.setSzCs(fontSize);
 
             // Make it bold
             BooleanDefaultTrue bold = factory.createBooleanDefaultTrue();
             rPr.setB(bold);
             rPr.setBCs(bold);
 
             stopR.setRPr(rPr);
 
             Text stopText = factory.createText();
             stopText.setValue("STOP");
             stopR.getContent().add(stopText);
         }
 
         centerP.getContent().add(stopR);
         pkg.getMainDocumentPart().addObject(centerP);
 
         // Add more empty paragraphs for bottom spacing
         for (int i = 0; i < 8; i++) {
             P emptyP = factory.createP();
             pkg.getMainDocumentPart().addObject(emptyP);
         }
     }
 
-    /** Remove trailing page break if the last paragraph only contains a page break. */
+    /**
+     * Remove trailing page breaks and empty paragraphs to avoid blank pages
+     * before inserting the next section.
+     */
     private void removeTrailingPageBreak(WordprocessingMLPackage pkg) {
         java.util.List<Object> content = pkg.getMainDocumentPart().getContent();
-        if (content.isEmpty()) {
-            return;
+        // Remove any empty trailing paragraphs
+        while (!content.isEmpty() && isEmptyParagraph(content.get(content.size() - 1))) {
+            content.remove(content.size() - 1);
         }
-        Object last = content.get(content.size() - 1);
-        if (isPageBreakParagraph(last)) {
+
+        // Remove a trailing page break paragraph if present
+        if (!content.isEmpty() && isPageBreakParagraph(content.get(content.size() - 1))) {
             content.remove(content.size() - 1);
+
+            // Also remove any empty paragraphs that may precede the page break
+            while (!content.isEmpty() && isEmptyParagraph(content.get(content.size() - 1))) {
+                content.remove(content.size() - 1);
+            }
         }
     }
 
+    /** Check if the given object is an empty paragraph with no content. */
+    private boolean isEmptyParagraph(Object obj) {
+        return obj instanceof P p && p.getContent().isEmpty();
+    }
+
     /** Check if the given object is a paragraph consisting solely of a page break. */
     private boolean isPageBreakParagraph(Object obj) {
         if (obj instanceof P p) {
             for (Object c : p.getContent()) {
                 Object val = c;
                 if (c instanceof javax.xml.bind.JAXBElement) {
                     val = ((javax.xml.bind.JAXBElement<?>) c).getValue();
                 }
                 if (val instanceof Br br && br.getType() == STBrType.PAGE) {
                     return true;
                 }
             }
         }
         return false;
     }
 
     /** Add a page break to the document. */
     public void addPageBreak(WordprocessingMLPackage pkg) {
         // Create a new paragraph
         P p = factory.createP();
         // Create a run inside it
         R r = factory.createR();
         // Create the page-break element
         Br br = factory.createBr();
         br.setType(STBrType.PAGE);
 
EOF
)