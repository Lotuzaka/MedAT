 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/main/java/CustomRenderer.java b/src/main/java/CustomRenderer.java
index d11614160ff22ad20226ae0231dd3055f97deafa..596b61c02fade2e7308d8a0c0b41b9feb63f8cd1 100644
--- a/src/main/java/CustomRenderer.java
+++ b/src/main/java/CustomRenderer.java
@@ -113,114 +113,114 @@ public class CustomRenderer extends DefaultTableCellRenderer {
                 optionsPanel.add(optionPanel);
             }
 
             return optionsPanel;
         }
 
         Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
         c.setForeground(Color.BLACK);
 
         boolean isPendingDeletion = false;
         if (isQuestionRow) {
             String questionNumber = String.valueOf(model.getValueAt(row, 0));
             if (questionNumber != null && questionNumber.matches("\\d+")) {
                 int questionNum = Integer.parseInt(questionNumber);
                 QuestionIdentifier identifier = new QuestionIdentifier(currentSubcategory, questionNum);
                 isPendingDeletion = pendingDeleteQuestions.contains(identifier);
             }
             if (isPendingDeletion) {
                 c.setBackground(Color.RED);
                 c.setForeground(Color.WHITE);
             } else {
                 c.setBackground(new Color(221, 221, 221));
             }
         } else {
             c.setBackground(Color.WHITE);
-            Boolean isChecked = (Boolean) model.getValueAt(row, 2);
+            Boolean isChecked = (Boolean) model.getValueAt(row, 3);
             if (isChecked != null && isChecked) {
                 c.setBackground(new Color(127, 204, 165, 75));
             }
         }
 
-        if (column == 2) {
+        if (column == 3) {
             if (isQuestionRow) {
                 JLabel deleteLabel = new JLabel("X", SwingConstants.CENTER);
                 deleteLabel.setForeground(isPendingDeletion ? Color.WHITE : Color.RED);
                 deleteLabel.setBackground(c.getBackground());
                 deleteLabel.setOpaque(true);
                 return deleteLabel;
             } else {
                 Boolean checked = false;
                 if (value instanceof Boolean) {
                     checked = (Boolean) value;
                 }
                 JCheckBox checkBox = new JCheckBox();
                 checkBox.setSelected(checked);
                 checkBox.setHorizontalAlignment(SwingConstants.CENTER);
                 checkBox.setEnabled(false);
                 checkBox.setBackground(c.getBackground());
                 checkBox.setForeground(c.getForeground());
                 return checkBox;
             }
         }
 
-        if (column == 3) {
+        if (column == 4) {
             if (isQuestionRow) {
                 // Only show gear icon on question rows
                 JLabel gearLabel = new JLabel(gearIcon);
                 gearLabel.setHorizontalAlignment(SwingConstants.CENTER);
                 gearLabel.setBackground(c.getBackground());
                 gearLabel.setOpaque(true);
                 return gearLabel;
             } else {
                 // Option row: highlight cell green if correct
-                Boolean isChecked = (Boolean) model.getValueAt(row, 2);
+                Boolean isChecked = (Boolean) model.getValueAt(row, 3);
                 JLabel empty = new JLabel();
                 empty.setOpaque(true);
                 if (isChecked != null && isChecked) {
                     empty.setBackground(new Color(127, 204, 165, 75));
                 } else {
                     empty.setBackground(c.getBackground());
                 }
                 return empty;
             }
         }
 
-        if (column == 3 && !isQuestionRow) {
+        if (column == 4 && !isQuestionRow) {
             return new JLabel("");
         }
 
         if (isQuestionRow) {
             c.setFont(c.getFont().deriveFont(Font.BOLD));
         } else if (!isPendingDeletion) {
-            Boolean isChecked = (Boolean) model.getValueAt(row, 2);
+            Boolean isChecked = (Boolean) model.getValueAt(row, 3);
             if (isChecked != null && isChecked) {
                 c.setBackground(new Color(127, 204, 165, 75));
             }
         }
 
-        if (column == 4 && isFrageRow(row, (DefaultTableModel) table.getModel())) {
+        if (column == 5 && isFrageRow(row, (DefaultTableModel) table.getModel())) {
             String difficulty = (String) value;
             if (difficulty != null && !difficulty.isEmpty()) {
                 try {
                     Difficulty diff = Difficulty.valueOf(difficulty.toUpperCase());
 
                     JPanel panel = new JPanel(new GridBagLayout());
                     panel.setOpaque(true);
                     panel.setBackground(c.getBackground());
 
                     JLabel badge = new JLabel(diff.symbol);
                     badge.setForeground(diff.color);
                     badge.setFont(new Font("Arial", Font.BOLD, 18));
 
                     GridBagConstraints gbc = new GridBagConstraints();
                     gbc.gridx = 0;
                     gbc.gridy = 0;
                     gbc.anchor = GridBagConstraints.CENTER;
 
                     panel.add(badge, gbc);
                     return panel;
                 } catch (IllegalArgumentException e) {
                     return c;
                 }
             }
         }
 
EOF
)