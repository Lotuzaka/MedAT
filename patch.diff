 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/pom.xml b/pom.xml
index 65bf8604f946fb5620e1dfde3d9f283071d26987..30a38a07c66f8afe6bfd00de15456e79f027018e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -56,50 +56,57 @@
     </dependency>
 
     <dependency>
       <groupId>mysql</groupId>
       <artifactId>mysql-connector-java</artifactId>
       <version>8.0.33</version>
     </dependency>
   
     <dependency>
       <groupId>org.apache.derby</groupId>
       <artifactId>derby</artifactId>
       <version>10.17.1.0</version>
     </dependency>
     
     <dependency>
         <groupId>com.zaxxer</groupId>
         <artifactId>HikariCP</artifactId>
         <version>3.4.5</version>
     </dependency>
 
     <dependency>
       <groupId>org.locationtech.jts</groupId>
       <artifactId>jts-core</artifactId>
       <version>1.20.0</version>
     </dependency>
+
+    <!-- Jackson for JSON parsing -->
+    <dependency>
+      <groupId>com.fasterxml.jackson.core</groupId>
+      <artifactId>jackson-databind</artifactId>
+      <version>2.17.0</version>
+    </dependency>
   </dependencies>
 
 
   <build>
     <plugins>
       <!-- Maven JAR Plugin -->
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-jar-plugin</artifactId>
         <version>3.1.2</version>
         <configuration>
           <archive>
             <manifestEntries>
               <Main-Class>MedatoninDB</Main-Class> <!-- Replace with the correct package name -->
             </manifestEntries>
           </archive>
         </configuration>
       </plugin>
 
       <!-- Maven Shade Plugin -->
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-shade-plugin</artifactId>
         <version>3.2.4</version>
         <executions>
diff --git a/src/main/java/merk/MerkTemplate.java b/src/main/java/merk/MerkTemplate.java
new file mode 100644
index 0000000000000000000000000000000000000000..472f4e13415f74479958025aa80bdaf2883d76b5
--- /dev/null
+++ b/src/main/java/merk/MerkTemplate.java
@@ -0,0 +1,12 @@
+package merk;
+
+public enum MerkTemplate {
+    S1,S2,S3,S4,S5,S6,S7,S8,S9,
+    M1,M2,M3,M4,M5,M6,M7,M8,
+    ID1,ID2,ID3,ID4,ID5,ID6,
+    D1,D2,D3,D4,D5,D6,D7,D8,
+    C1,C2,C3,C4,C5,C6,C7,C8,
+    SET1,SET2,SET3,SET4,SET5,SET6,SET7,SET8,
+    IMG1,IMG2,IMG3,IMG4,IMG5,
+    ADV1,ADV2,ADV3,ADV4,ADV5,ADV6,ADV7,ADV8;
+}
diff --git a/src/main/java/merk/TemplateData.java b/src/main/java/merk/TemplateData.java
new file mode 100644
index 0000000000000000000000000000000000000000..fe90b970e3a02d88170ef8d930216b5351adbf00
--- /dev/null
+++ b/src/main/java/merk/TemplateData.java
@@ -0,0 +1,5 @@
+package merk;
+
+import java.util.List;
+
+public record TemplateData(MerkTemplate id, String question, List<String> variants) {}
diff --git a/src/main/java/merk/TemplateRegistry.java b/src/main/java/merk/TemplateRegistry.java
new file mode 100644
index 0000000000000000000000000000000000000000..39e685d72b8430ce7542d206b7670937c75cbfb4
--- /dev/null
+++ b/src/main/java/merk/TemplateRegistry.java
@@ -0,0 +1,52 @@
+package merk;
+
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.UncheckedIOException;
+import java.util.*;
+
+public final class TemplateRegistry {
+    private final Map<MerkTemplate, TemplateData> templates;
+
+    private TemplateRegistry(Map<MerkTemplate, TemplateData> templates) {
+        this.templates = templates;
+    }
+
+    public static TemplateRegistry load() {
+        Map<MerkTemplate, TemplateData> map = new EnumMap<>(MerkTemplate.class);
+        for (MerkTemplate t : MerkTemplate.values()) {
+            map.put(t, new TemplateData(t, null, List.of()));
+        }
+        try (InputStream in = TemplateRegistry.class.getResourceAsStream("/merk/templates.json")) {
+            if (in != null) {
+                ObjectMapper om = new ObjectMapper();
+                List<JsonTemplate> list = om.readValue(in, new TypeReference<>(){});
+                for (JsonTemplate jt : list) {
+                    MerkTemplate id = MerkTemplate.valueOf(jt.id);
+                    List<String> vars = jt.variants == null ? List.of() : List.copyOf(jt.variants);
+                    map.put(id, new TemplateData(id, jt.question, vars));
+                }
+            }
+        } catch (IOException ex) {
+            throw new UncheckedIOException(ex);
+        }
+        return new TemplateRegistry(map);
+    }
+
+    public TemplateData get(MerkTemplate id) {
+        return templates.get(id);
+    }
+
+    public Collection<TemplateData> all() {
+        return templates.values();
+    }
+
+    private static class JsonTemplate {
+        public String id;
+        public String question;
+        public List<String> variants;
+    }
+}
diff --git a/src/main/resources/merk/templates.json b/src/main/resources/merk/templates.json
new file mode 100644
index 0000000000000000000000000000000000000000..98bffb265604a1e8d83005b0170ab7ffd05480cf
--- /dev/null
+++ b/src/main/resources/merk/templates.json
@@ -0,0 +1,490 @@
+[
+  {
+    "id": "S1",
+    "question": "Die Person mit der Ausweisnummer {ID} hat welche Blutgruppe?",
+    "variants": [
+      "Blutgruppe der Person Nr. {ID}?",
+      "Welche Blutgruppe besitzt die Person mit der Ausweisnummer {ID}?",
+      "Welche Blutgruppe hat die Person, deren Ausweisnummer {ID} lautet?"
+    ]
+  },
+  {
+    "id": "S2",
+    "question": "Welche Ausweisnummer hat die Person aus {COUNTRY}?",
+    "variants": [
+      "Nummer des Ausweises aus {COUNTRY}?",
+      "Welche Identifikationsnummer gehört zur Person aus {COUNTRY}?",
+      "Der Ausweis aus {COUNTRY} trägt welche Nummer?"
+    ]
+  },
+  {
+    "id": "S3",
+    "question": "Wie heißt die Person aus {COUNTRY} mit der Blutgruppe {BLOOD}?",
+    "variants": [
+      "Wer stammt aus {COUNTRY} und hat Blutgruppe {BLOOD}?",
+      "Name der Person aus {COUNTRY} mit Blutgruppe {BLOOD}?",
+      "Welche Person aus {COUNTRY} besitzt die Blutgruppe {BLOOD}?"
+    ]
+  },
+  {
+    "id": "S4",
+    "question": "Wann ist {NAME} geboren?",
+    "variants": [
+      "Geburtsdatum von {NAME}?",
+      "Wann feiert {NAME} Geburtstag?",
+      "An welchem Datum hat {NAME} Geburtstag?"
+    ]
+  },
+  {
+    "id": "S5",
+    "question": "Welche Allergien hat die Person mit der Blutgruppe {BLOOD} und dem Geburtsdatum {DOB}?",
+    "variants": [
+      "Allergien der Person (Blut {BLOOD}, geb. {DOB})?",
+      "Welche Allergien weist die am {DOB} geborene Person mit Blutgruppe {BLOOD} auf?"
+    ]
+  },
+  {
+    "id": "S6",
+    "question": "In welchem Land wurde der Ausweis von {NAME} ausgestellt?",
+    "variants": [
+      "Land des Ausweises von {NAME}?",
+      "Woher stammt {NAME}?",
+      "Ausstellungsland für {NAME}?"
+    ]
+  },
+  {
+    "id": "S7",
+    "question": "Welche Blutgruppe hat {NAME}?",
+    "variants": [
+      "Blutgruppe von {NAME}?",
+      "Welche Blutgruppe besitzt {NAME}?",
+      "Welche Blutgruppe wurde für {NAME} vermerkt?"
+    ]
+  },
+  {
+    "id": "S8",
+    "question": "Nimmt {NAME} Medikamente ein?",
+    "variants": [
+      "Medikamentenanamnese {NAME}?",
+      "Gibt {NAME} eine Medikamenteneinnahme an?",
+      "MedStatus von {NAME}: Ja oder Nein?"
+    ]
+  },
+  {
+    "id": "S9",
+    "question": "Welche Ausweisnummer gehört zu {NAME}?",
+    "variants": [
+      "Ausweisnummer von {NAME}?",
+      "Welche Nummer hat {NAME}?",
+      "Identifikationsnummer {NAME}?"
+    ]
+  },
+  {
+    "id": "M1",
+    "question": "Die Person aus {COUNTRY} und der Blutgruppe {BLOOD} hat unter anderem welche Allergie?",
+    "variants": [
+      "Allergie der Person aus {COUNTRY} mit Blut {BLOOD}?",
+      "Nenne eine Allergie (Land {COUNTRY}, Blut {BLOOD})."
+    ]
+  },
+  {
+    "id": "M2",
+    "question": "Welche Blutgruppe und Medikamentenanamnese hat die Person mit einer Allergie gegen {ALLERGY_X}?",
+    "variants": [
+      "Blutgruppe + Medikamente: {ALLERGY_X}-Person?",
+      "{ALLERGY_X}-Allergiker: Blut & MedStatus?"
+    ]
+  },
+  {
+    "id": "M3",
+    "question": "Woher stammt die Person mit der Ausweisnummer {ID} und {MEDS_BOOL} Medikamentenanamnese?",
+    "variants": [
+      "Land Ausweis {ID} (Meds {MEDS_BOOL})?",
+      "Ausweis {ID}: In welchem Land ausgestellt?"
+    ]
+  },
+  {
+    "id": "M4",
+    "question": "Welche Ausweisnummer hat die Person, die {ALLERGY_X} hat und {MEDS_BOOL} Medikamente einnimmt?",
+    "variants": [
+      "ID der {ALLERGY_X}/{MEDS_BOOL}-Person?",
+      "Welche Nummer trägt der Ausweis (Allergie {ALLERGY_X}; Meds {MEDS_BOOL})?"
+    ]
+  },
+  {
+    "id": "M5",
+    "question": "Welche Person aus {COUNTRY} feiert im Monat {DOB_MONTH} Geburtstag?",
+    "variants": [
+      "Wer aus {COUNTRY} hat im {DOB_MONTH} Geburtstag?",
+      "Person (Land {COUNTRY}, Monat {DOB_MONTH})?"
+    ]
+  },
+  {
+    "id": "M6",
+    "question": "Wer aus {COUNTRY} hat die Blutgruppe {BLOOD} und nimmt {MEDS_BOOL} Medikamente ein?",
+    "variants": [
+      "Person (Land {COUNTRY}, Blut {BLOOD}, Meds {MEDS_BOOL})?",
+      "Wer erfüllt Land+Blut+Meds?"
+    ]
+  },
+  {
+    "id": "M7",
+    "question": "Welche Blutgruppe hat die am {DOB} geborene Person aus {COUNTRY}?",
+    "variants": [
+      "Blut {COUNTRY}/{DOB}?",
+      "Welche Blutgruppe besitzt die Person ({COUNTRY}, {DOB})?"
+    ]
+  },
+  {
+    "id": "M8",
+    "question": "Welche Person mit Blutgruppe {BLOOD} stammt NICHT aus {COUNTRY_EXCEPT}?",
+    "variants": [
+      "{BLOOD}-Person nicht {COUNTRY_EXCEPT}?",
+      "Wer (Blut {BLOOD}) kommt aus einem anderen Land?"
+    ]
+  },
+  {
+    "id": "ID1",
+    "question": "Welche Ziffern hat die Person mit der Ausweisnummer {ID} an den letzten zwei Stellen?",
+    "variants": [
+      "Welche Endziffern besitzt {ID}?",
+      "Letzte zwei Zahlen von {ID}?"
+    ]
+  },
+  {
+    "id": "ID2",
+    "question": "Wie viele Personen haben die Zahl {DIGIT} an erster Stelle ihrer Ausweisnummer?",
+    "variants": [
+      "Wie viele Ausweise beginnen mit {DIGIT}?",
+      "Anzahl Personen mit Präfix {DIGIT}?"
+    ]
+  },
+  {
+    "id": "ID3",
+    "question": "Woher stammt die Person mit den Ziffern {PREFIX3} an den ersten Stellen ihrer Ausweisnummer?",
+    "variants": [
+      "Land mit Präfix {PREFIX3}?",
+      "Ausweis {PREFIX3} → Land?"
+    ]
+  },
+  {
+    "id": "ID4",
+    "question": "Welche beiden Personen haben eine Ausweisnummer, die mit {DIGIT} endet?",
+    "variants": [
+      "Wer hat Endziffer {DIGIT}?",
+      "Name-Paar mit Endziffer {DIGIT}?"
+    ]
+  },
+  {
+    "id": "ID5",
+    "question": "Wie viele Ausweise beginnen mit den Ziffern {PREFIX2}?",
+    "variants": [
+      "Count Präfix {PREFIX2}?",
+      "Anzahl IDs Start {PREFIX2}?"
+    ]
+  },
+  {
+    "id": "ID6",
+    "question": "Welche Ausweisnummer beginnt mit {DIGIT1} und endet mit {DIGIT2}?",
+    "variants": [
+      "ID Start {DIGIT1} / Ende {DIGIT2}?",
+      "Welche Nummer passt zu {DIGIT1}...{DIGIT2}?"
+    ]
+  },
+  {
+    "id": "D1",
+    "question": "Wann sind die Personen mit der Blutgruppe {BLOOD} geboren?",
+    "variants": [
+      "Geburtsdaten {BLOOD}-Personen?",
+      "Daten der {BLOOD}-Geburtstage?"
+    ]
+  },
+  {
+    "id": "D2",
+    "question": "Wie viele Personen sind zwischen {DATE_START} und {DATE_END} geboren?",
+    "variants": [
+      "Anzahl Geburten {DATE_START}–{DATE_END}?",
+      "Wie viele DOB im Bereich?"
+    ]
+  },
+  {
+    "id": "D3",
+    "question": "Welche Personen feiern im Monat {DOB_MONTH} Geburtstag?",
+    "variants": [
+      "Wer hat im {DOB_MONTH} Geburtstag?",
+      "Namen im Monat {DOB_MONTH}?"
+    ]
+  },
+  {
+    "id": "D4",
+    "question": "Die Person aus {COUNTRY} mit der Blutgruppe {BLOOD} feiert an welchem Tag im Monat Geburtstag?",
+    "variants": [
+      "Tag Geburtstag (Land {COUNTRY}, Blut {BLOOD})?",
+      "Welche Tageszahl: {COUNTRY}+{BLOOD}?"
+    ]
+  },
+  {
+    "id": "D5",
+    "question": "Wer ist älter: {NAME_A} oder {NAME_B}?",
+    "variants": [
+      "Welche Person ist älter: {NAME_A} oder {NAME_B}?",
+      "Wer wurde früher geboren ({NAME_A}/{NAME_B})?"
+    ]
+  },
+  {
+    "id": "D6",
+    "question": "Wer ist der/die Jüngste unter allen Personen?",
+    "variants": [
+      "Welche Person wurde zuletzt geboren?",
+      "Wer hat das jüngste Geburtsdatum?"
+    ]
+  },
+  {
+    "id": "D7",
+    "question": "Welche zwei Personen haben am selben Tag Geburtstag?",
+    "variants": [
+      "Name-Paar gleicher Geburtstag?",
+      "Wer teilt sich den Geburtstag?"
+    ]
+  },
+  {
+    "id": "D8",
+    "question": "In welchem Monat liegen die meisten Geburtstage?",
+    "variants": [
+      "Geburtsmonat mit den meisten Personen?",
+      "Welcher Monat kommt am häufigsten vor?"
+    ]
+  },
+  {
+    "id": "C1",
+    "question": "Wie viele Personen nehmen keine Medikamente ein?",
+    "variants": [
+      "Wie viele ohne Medikamentenanamnese?",
+      "Anzahl Personen ohne Medikamente?"
+    ]
+  },
+  {
+    "id": "C2",
+    "question": "Wie viele Personen haben die Blutgruppe {BLOOD}?",
+    "variants": [
+      "Anzahl Blutgruppe {BLOOD}?",
+      "Wie oft {BLOOD}?"
+    ]
+  },
+  {
+    "id": "C3",
+    "question": "Wie viele Personen haben eine Allergie gegen {ALLERGY_X}?",
+    "variants": [
+      "Count {ALLERGY_X}-Allergie?",
+      "Wie oft {ALLERGY_X} vermerkt?"
+    ]
+  },
+  {
+    "id": "C4",
+    "question": "Wie viele Personen haben einen Geburtstag im {MONTH}?",
+    "variants": [
+      "Anzahl im {MONTH} Geborenen?",
+      "Wie oft Monat {MONTH}?"
+    ]
+  },
+  {
+    "id": "C5",
+    "question": "Wie viele Personen haben mehr als zwei Allergien?",
+    "variants": [
+      "Anzahl Personen >2 Allergien?",
+      "Wie viele mit vielen Allergien?"
+    ]
+  },
+  {
+    "id": "C6",
+    "question": "Wie viele Personen nehmen Medikamente ein?",
+    "variants": [
+      "Anzahl Medikation Ja?",
+      "Wie viele mit positiver Medikamentenanamnese?"
+    ]
+  },
+  {
+    "id": "C7",
+    "question": "Wie viele Personen stammen aus Europa?",
+    "variants": [
+      "Anzahl europäische Länder?",
+      "Wie viele aus einem europäischen Land?"
+    ]
+  },
+  {
+    "id": "C8",
+    "question": "Wie viele Personen haben eine Blutgruppe ungleich 0?",
+    "variants": [
+      "Anzahl nicht-0 Blutgruppe?",
+      "Wie viele A/B/AB?"
+    ]
+  },
+  {
+    "id": "SET1",
+    "question": "Welche Personen haben eine negative Medikamentenanamnese?",
+    "variants": [
+      "Wer nimmt keine Medikamente ein?",
+      "Namen ohne Medikation?"
+    ]
+  },
+  {
+    "id": "SET2",
+    "question": "Welche Ausweisnummern besitzen die Personen mit einer positiven Medikamentenanamnese?",
+    "variants": [
+      "IDs aller mit Medikation?",
+      "Welche Ausweise bei Meds Ja?"
+    ]
+  },
+  {
+    "id": "SET3",
+    "question": "Welche Personen haben nicht die Blutgruppe {BLOOD}?",
+    "variants": [
+      "Namen ohne {BLOOD}?",
+      "Wer hat andere Blutgruppe?"
+    ]
+  },
+  {
+    "id": "SET4",
+    "question": "Welche Personen haben eine Allergie unter anderem gegen {ALLERGY_X}?",
+    "variants": [
+      "Wer reagiert auf {ALLERGY_X}?",
+      "Personen {ALLERGY_X}-Allergie?"
+    ]
+  },
+  {
+    "id": "SET5",
+    "question": "Welche Personen teilen sich die Blutgruppe {BLOOD}?",
+    "variants": [
+      "Namen mit Blut {BLOOD}?",
+      "Wer hat ebenfalls {BLOOD}?"
+    ]
+  },
+  {
+    "id": "SET6",
+    "question": "Welche Personen wurden im {MONTH} geboren und nehmen Medikamente ein?",
+    "variants": [
+      "Namen {MONTH}+Meds Ja?",
+      "Wer (Monat {MONTH}) hat Medikation?"
+    ]
+  },
+  {
+    "id": "SET7",
+    "question": "Welche Personen haben mehr als eine Allergie?",
+    "variants": [
+      "Mehrfachallergien – welche Personen?",
+      "Wer hat >=2 Allergien?"
+    ]
+  },
+  {
+    "id": "SET8",
+    "question": "Welche Personen stammen NICHT aus {COUNTRY_EXCEPT}?",
+    "variants": [
+      "Alle außer {COUNTRY_EXCEPT}?",
+      "Wer kommt aus anderen Ländern?"
+    ]
+  },
+  {
+    "id": "IMG1",
+    "question": "Wie heißt die Person auf dem Foto?",
+    "variants": [
+      "Wer ist auf dem Foto?",
+      "Welche Person ist abgebildet?"
+    ]
+  },
+  {
+    "id": "IMG2",
+    "question": "Welche Ausweisnummer hat die abgebildete Person?",
+    "variants": [
+      "ID der Person im Bild?",
+      "Welche Nummer gehört zur abgebildeten Person?"
+    ]
+  },
+  {
+    "id": "IMG3",
+    "question": "Welche Blutgruppe hat die Person auf dem Foto?",
+    "variants": [
+      "Blutgruppe der abgebildeten Person?",
+      "Welche Blutgruppe besitzt die Person im Bild?"
+    ]
+  },
+  {
+    "id": "IMG4",
+    "question": "Woher stammt die Person auf dem Foto?",
+    "variants": [
+      "Land der abgebildeten Person?",
+      "In welchem Land wurde ihr Ausweis ausgestellt?"
+    ]
+  },
+  {
+    "id": "IMG5",
+    "question": "Welche der abgebildeten Personen ist älter?",
+    "variants": [
+      "Wer ist älter (Foto A/B)?",
+      "Welche Person (Bild) wurde früher geboren?"
+    ]
+  },
+  {
+    "id": "ADV1",
+    "question": "Die Person mit einer {ALLERGY_X}-Allergie und der Blutgruppe {BLOOD} hat welche zwei Ziffern an letzter Stelle der Ausweisnummer?",
+    "variants": [
+      "Endziffern {ALLERGY_X}/{BLOOD}?",
+      "Welche 2 Endziffern hat diese Ausweisnummer?"
+    ]
+  },
+  {
+    "id": "ADV2",
+    "question": "Welche Blutgruppe und Medikamentenanamnese hat die Person aus {COUNTRY}?",
+    "variants": [
+      "Blut & Medikamente: Person aus {COUNTRY}?",
+      "Welche Kombination (Blut/Meds) gilt für {COUNTRY}?"
+    ]
+  },
+  {
+    "id": "ADV3",
+    "question": "Welche Ausweisnummer hat die Person mit {MEDS_BOOL} Medikamentenanamnese und den Ziffern {PREFIX2} an erster Stelle?",
+    "variants": [
+      "ID der {MEDS_BOOL}-Person (Präfix {PREFIX2})?",
+      "Nummer Start {PREFIX2}?"
+    ]
+  },
+  {
+    "id": "ADV4",
+    "question": "Welche Allergien hat die Person mit der Blutgruppe {BLOOD} und dem Geburtstag {DOB}?",
+    "variants": [
+      "Allergieliste (Blut {BLOOD}, Geb {DOB})?",
+      "Welche Allergien weist ({BLOOD}/{DOB}) auf?"
+    ]
+  },
+  {
+    "id": "ADV5",
+    "question": "Welche Person ist jünger: {NAME_A} oder {NAME_B}?",
+    "variants": [
+      "Wer ist jünger ({NAME_A}/{NAME_B})?",
+      "Welche Person wurde später geboren?"
+    ]
+  },
+  {
+    "id": "ADV6",
+    "question": "Welche zwei Personen teilen sich dieselbe Blutgruppe?",
+    "variants": [
+      "Name-Paar gleiche Blutgruppe?",
+      "Wer hat identische Blutgruppe?"
+    ]
+  },
+  {
+    "id": "ADV7",
+    "question": "Welche Person hat die meisten Allergien?",
+    "variants": [
+      "Wer hat am meisten Allergien?",
+      "Person mit größter Allergiezahl?"
+    ]
+  },
+  {
+    "id": "ADV8",
+    "question": "Welche Person mit Blutgruppe {BLOOD} nimmt Medikamente ein?",
+    "variants": [
+      "Wer (Blut {BLOOD}) hat Medikation Ja?",
+      "Namen {BLOOD}+Meds?"
+    ]
+  }
+]
diff --git a/src/test/java/merk/TemplateRegistryTest.java b/src/test/java/merk/TemplateRegistryTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..913abee64bf5a2943c754bf5762df0821ecf1220
--- /dev/null
+++ b/src/test/java/merk/TemplateRegistryTest.java
@@ -0,0 +1,16 @@
+package merk;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+public class TemplateRegistryTest {
+    @Test
+    void loadProvidesAllTemplates() {
+        TemplateRegistry reg = TemplateRegistry.load();
+        assertEquals(MerkTemplate.values().length, reg.all().size());
+        TemplateData d = reg.get(MerkTemplate.S1);
+        assertNotNull(d);
+        assertEquals("Die Person mit der Ausweisnummer {ID} hat welche Blutgruppe?", d.question());
+    }
+}
 
EOF
)