 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/main/java/docx/Docx4jPrinter.java b/src/main/java/docx/Docx4jPrinter.java
index 60d32f12463592e0a9e834cbf4f289b4e9c1c142..dbc2b147916ab358414ea38bfec6971ec7f644e9 100644
--- a/src/main/java/docx/Docx4jPrinter.java
+++ b/src/main/java/docx/Docx4jPrinter.java
@@ -449,51 +449,52 @@ public class Docx4jPrinter {
         double scaleY = height / env.getHeight();
         double scale = Math.min(scaleX, scaleY) * 0.9;
 
         AffineTransform at = new AffineTransform();
         at.translate(width / 2.0, height / 2.0);
         at.scale(scale, -scale);
         at.translate(-env.centre().x, -env.centre().y);
 
         Shape shape = writer.toShape(geometry);
         Shape ts = at.createTransformedShape(shape);
         g2d.setColor(new Color(200, 200, 200));
         g2d.fill(ts);
         g2d.setColor(Color.BLACK);
         g2d.setStroke(new BasicStroke(2.0f));
         g2d.draw(ts);
 
         g2d.dispose();
         return image;
     }
 
     /**
      * Add Figuren option images in a two-row table (images above labels).
      */
     private void addFigurenOptionsImages(WordprocessingMLPackage pkg, Object figurenOptionsData) {
         try {
-            java.lang.reflect.Field optionsField = figurenOptionsData.getClass().getField("options");
+            java.lang.reflect.Field optionsField = figurenOptionsData.getClass().getDeclaredField("options");
+            optionsField.setAccessible(true);
             @SuppressWarnings("unchecked")
             java.util.List<Object> options = (java.util.List<Object>) optionsField.get(figurenOptionsData);
             if (options == null || options.isEmpty()) {
                 return;
             }
 
             Tbl table = factory.createTbl();
             Tr imageRow = factory.createTr();
             Tr labelRow = factory.createTr();
 
             for (Object opt : options) {
                 String label = String.valueOf(opt.getClass().getMethod("getLabel").invoke(opt));
                 String text = String.valueOf(opt.getClass().getMethod("getText").invoke(opt));
                 String shapeData = (String) opt.getClass().getMethod("getShapeData").invoke(opt);
 
                 // Image cell
                 Tc imgCell = factory.createTc();
                 P imgP = factory.createP();
 
                 if ("X".equals(text) || "E".equalsIgnoreCase(label)) {
                     R r = factory.createR();
                     Text t = factory.createText();
                     t.setValue("X");
                     r.getContent().add(t);
                     imgP.getContent().add(r);
diff --git a/src/main/java/docx/Docx4jPrinter.java b/src/main/java/docx/Docx4jPrinter.java
index 60d32f12463592e0a9e834cbf4f289b4e9c1c142..dbc2b147916ab358414ea38bfec6971ec7f644e9 100644
--- a/src/main/java/docx/Docx4jPrinter.java
+++ b/src/main/java/docx/Docx4jPrinter.java
@@ -527,79 +528,78 @@ public class Docx4jPrinter {
         } catch (Exception e) {
             System.out.println("Could not add Figuren option images: " + e.getMessage());
         }
     }
     
     /**
      * Add question options from the table model with horizontal layout and proper A-E labels.
      */
     private void addQuestionOptions(WordprocessingMLPackage pkg, DefaultTableModel model, int startRow) {
         // Look for options in subsequent rows
         int currentRow = startRow + 1;
 
         if (currentRow < model.getRowCount()) {
             Object optObj = model.getValueAt(currentRow, 1);
             if (optObj != null && optObj.getClass().getSimpleName().equals("FigurenOptionsData")) {
                 addFigurenOptionsImages(pkg, optObj);
                 return;
             }
         }
 
         java.util.List<String> optionTexts = new ArrayList<>();
         
         // Collect all options first
         while (currentRow < model.getRowCount()) {
             Object rowIdentifier = model.getValueAt(currentRow, 0);
-            if (rowIdentifier != null && !rowIdentifier.toString().trim().isEmpty() && 
-                !rowIdentifier.toString().matches("\\d+")) {
-                // This looks like an option
-                Object optionObj = model.getValueAt(currentRow, 1);
-                if (optionObj != null) {
+            if (rowIdentifier != null && rowIdentifier.toString().matches("\\d+")) {
+                break; // Next question encountered
+            }
+
+            Object optionObj = model.getValueAt(currentRow, 1);
+            if (optionObj != null) {
                     String optionText;
                     if (optionObj.getClass().getSimpleName().equals("FigurenOptionsData")) {
                         try {
                             // Use reflection to access option data
-                            java.lang.reflect.Field optionsField = optionObj.getClass().getField("options");
+                            java.lang.reflect.Field optionsField = optionObj.getClass().getDeclaredField("options");
+                            optionsField.setAccessible(true);
                             @SuppressWarnings("unchecked")
                             java.util.List<Object> options = (java.util.List<Object>) optionsField.get(optionObj);
                             if (options != null && !options.isEmpty()) {
                                 optionText = "[Figur Option]";
                             } else {
                                 optionText = optionObj.toString();
                             }
                         } catch (Exception e) {
                             optionText = optionObj.toString();
                         }
                     } else {
                         optionText = optionObj.toString();
                     }
                     optionTexts.add(optionText);
                 }
                 currentRow++;
-            } else {
-                break; // No more options
-            }
         }
         
         // Now display options horizontally with proper labels (A, B, C, D, E where E is "X")
         if (!optionTexts.isEmpty()) {
             // Create a paragraph for horizontal option layout
             P optionsP = factory.createP();
             
             // Set paragraph spacing for better layout
             PPr pPr = factory.createPPr();
             PPrBase.Spacing spacing = factory.createPPrBaseSpacing();
             spacing.setBefore(BigInteger.valueOf(120)); // Space before options
             spacing.setAfter(BigInteger.valueOf(120));  // Space after options
             pPr.setSpacing(spacing);
             optionsP.setPPr(pPr);
             
             for (int i = 0; i < optionTexts.size() && i < 5; i++) { // Limit to 5 options (A-E)
                 if (i > 0) {
                     // Add spacing between options
                     R spacingR = factory.createR();
                     Text spacingT = factory.createText();
                     spacingT.setValue("        "); // Multiple spaces for horizontal separation
                     spacingR.getContent().add(spacingT);
                     optionsP.getContent().add(spacingR);
                 }
                 
 
EOF
)