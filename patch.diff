 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/main/java/FigurenGenerator.java b/src/main/java/FigurenGenerator.java
index f2e5de838738dbbde2d6a2d2977d4824641ab425..9779fcc080d5cc3caa0778f2c4f9845c8fa2ae45 100644
--- a/src/main/java/FigurenGenerator.java
+++ b/src/main/java/FigurenGenerator.java
@@ -370,66 +370,57 @@ public class FigurenGenerator {
     }
 
     /** Distraktoren (andere Formen) */
     public List<Geometry> generateDistractorShapes(int num) {
         // Nur die passenden Pools je nach Ausgangsform
         List<String> polygonShapes = List.of("hexagon", "heptagon", "octagon", "pentagon");
         List<String> circleShapes = List.of("circle", "half circle", "quarter circle", "three-quarter circle");
 
         // Wähle Pool basierend auf shapeType
         List<String> pool;
         if (polygonShapes.contains(shapeType)) {
             pool = new ArrayList<>(polygonShapes);
         } else if (circleShapes.contains(shapeType)) {
             pool = new ArrayList<>(circleShapes);
         } else {
             // Fallback: im Zweifel alle Formen
             pool = new ArrayList<>();
             pool.addAll(polygonShapes);
             pool.addAll(circleShapes);
         }
 
         // Entferne die Ursprungsshape selbst
         pool.remove(shapeType);
 
         List<Geometry> out = new ArrayList<>(num);
-        for (int i = 0; i < num; i++) {
-            String candidate;
-            boolean used;
-            do {
-                // 1) neuen Kandidaten ziehen
-                candidate = pool.get(RAND.nextInt(pool.size()));
-                // 2) prüfen, ob er in einem existing-Shape vorkommt
-                used = false;
-                for (Geometry g : out) {
-                    if (g.toString().contains(candidate)) {
-                        used = true;
-                        break;
-                    }
-                }
-            } while (used);
-            // 3) akzeptierten Kandidaten hinzufügen
+        for (int i = 0; i < num && !pool.isEmpty(); i++) {
+            // Ziehe einen zufälligen Kandidaten und entferne ihn, damit keine
+            // Form mehrmals verwendet wird
+            int index = RAND.nextInt(pool.size());
+            String candidate = pool.remove(index);
+
+            // Füge die gewählte Form als Distraktor hinzu
             out.add(createShape(candidate, 200, 200, 100));
         }
         Collections.shuffle(out);
         return out;
     }
 
     /** Panel → Bild */
     public static BufferedImage getPanelImage(JPanel panel) {
         Dimension d = panel.getSize();
         if (d.width <= 0 || d.height <= 0) {
             d = panel.getPreferredSize();
             panel.setSize(d.width > 0 ? d.width : 400,
                     d.height > 0 ? d.height : 400);
         }
         BufferedImage img = new BufferedImage(
                 panel.getWidth(), panel.getHeight(),
                 BufferedImage.TYPE_INT_ARGB);
         Graphics2D g2 = img.createGraphics();
         g2.setColor(Color.WHITE);
         g2.fillRect(0, 0, panel.getWidth(), panel.getHeight());
         if (panel.isVisible())
             panel.printAll(g2);
         g2.dispose();
         return img;
     }
 
EOF
)