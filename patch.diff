 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/main/java/docx/Docx4jPrinter.java b/src/main/java/docx/Docx4jPrinter.java
index 37c78f13ccd672010f5b865ca4acbf256e209a3e..d06a2830de217c51f8deacb42756fc4dbed8460d 100644
--- a/src/main/java/docx/Docx4jPrinter.java
+++ b/src/main/java/docx/Docx4jPrinter.java
@@ -248,53 +248,69 @@ public WordprocessingMLPackage buildDocumentComplete(
             DefaultTableModel model = subcats.get(rawSubcat);
             if (model != null) {
                 addQuestions(pkg, model);
             }
         }
 
         // 4) break *between* subsections, but not after the last one
         if (i < reorderedSubcats.size() - 1) {
             addPageBreak(pkg);
         }
     }
 
     return pkg;
 }
 
     /**
      * Append the given question table to the document with proper handling for
      * different question types.
      */
     public void addQuestions(WordprocessingMLPackage pkg, DefaultTableModel model) {
         int figurenCounter = 0; // Counter for Figuren questions
         int nonFigCounter = 0; // Counter for non-Figuren questions
         boolean isFirstQuestionOnPage = true; // Track if this is the first question on each page
 
         for (int r = 0; r < model.getRowCount(); r++) {
-            String number = Objects.toString(model.getValueAt(r, 0), "");
+            String number = Objects.toString(model.getValueAt(r, 0), "").trim();
             Object questionObj = model.getValueAt(r, 1);
 
+            // Handle passage rows (non-numeric identifier and not option row)
+            if ((number.isEmpty() || !number.matches("\\d+")) && !number.matches("[A-E]\\)")
+                    && questionObj != null) {
+                String passage = questionObj.toString();
+                if (!passage.trim().isEmpty()) {
+                    P passageP = factory.createP();
+                    R passageR = factory.createR();
+                    Text passageT = factory.createText();
+                    passageT.setValue(passage);
+                    passageR.getContent().add(passageT);
+                    passageP.getContent().add(passageR);
+                    pkg.getMainDocumentPart().addObject(passageP);
+                }
+                continue;
+            }
+
             if (!number.isEmpty() && questionObj != null) {
                 String questionText;
                 boolean isFigurenQuestion = false;
 
                 // Handle Figuren questions (DissectedPieces objects)
                 if (questionObj.getClass().getSimpleName().equals("DissectedPieces")) {
                     questionText = "Welche Figur lässt sich aus den folgenden Bausteinen zusammensetzen?";
                     isFigurenQuestion = true;
                 } else {
                     questionText = questionObj.toString();
                 }
 
                 // Add page break for non-Figuren questions every 5 questions
                 if (!isFigurenQuestion) {
                     nonFigCounter++;
                 }
 
                 // For Figuren questions: existing page break logic
                 if (isFigurenQuestion) {
                     figurenCounter++;
                     if (figurenCounter > 3 && (figurenCounter - 1) % 3 == 0) {
                         // Clean any trailing breaks to avoid blank page before new section
                         removeTrailingPageBreak(pkg);
                         addPageBreak(pkg);
                         isFirstQuestionOnPage = true; // Reset for new page
diff --git a/src/main/java/docx/Docx4jPrinter.java b/src/main/java/docx/Docx4jPrinter.java
index 37c78f13ccd672010f5b865ca4acbf256e209a3e..d06a2830de217c51f8deacb42756fc4dbed8460d 100644
--- a/src/main/java/docx/Docx4jPrinter.java
+++ b/src/main/java/docx/Docx4jPrinter.java
@@ -341,54 +357,70 @@ public WordprocessingMLPackage buildDocumentComplete(
                 
                 // Add options/answers if they exist in the model, but control spacing for page breaks
                 // Also skip option rows to avoid re-processing them
                 r = addQuestionOptions(pkg, model, r, isFirstQuestionOnPage, needsPageBreak, isFigurenQuestion, nonFigCounter);
 
 
                 // Reset the first question flag after processing the first question
                 isFirstQuestionOnPage = false;
             }
         }
 
         // Ensure no leftover page break after the last question
         removeTrailingPageBreak(pkg);
     }
 
     /**
      * Add questions with solutions to the document with proper handling for
      * different question types.
      */
     public void addQuestionsSolution(WordprocessingMLPackage pkg, DefaultTableModel model) {
         int figurenCounter = 0; // Counter for Figuren questions
         int nonFigCounter = 0; // Counter for non-Figuren questions
         boolean isFirstQuestionOnPage = true; // Track if first question on a new page
 
         for (int r = 0; r < model.getRowCount(); r++) {
-            String number = Objects.toString(model.getValueAt(r, 0), "");
+            String number = Objects.toString(model.getValueAt(r, 0), "").trim();
             Object questionObj = model.getValueAt(r, 1);
             String solution = Objects.toString(model.getValueAt(r, 2), "");
 
+            // Handle passage rows before question blocks
+            if ((number.isEmpty() || !number.matches("\\d+")) && !number.matches("[A-E]\\)")
+                    && questionObj != null) {
+                String passage = questionObj.toString();
+                if (!passage.trim().isEmpty()) {
+                    P passageP = factory.createP();
+                    R passageR = factory.createR();
+                    Text passageT = factory.createText();
+                    passageT.setValue(passage);
+                    passageR.getContent().add(passageT);
+                    passageP.getContent().add(passageR);
+                    pkg.getMainDocumentPart().addObject(passageP);
+                }
+                continue;
+            }
+
             if (!number.isEmpty() && questionObj != null) {
                 String questionText;
                 boolean isFigurenQuestion = false;
 
                 // Handle Figuren questions (DissectedPieces objects)
                 if (questionObj.getClass().getSimpleName().equals("DissectedPieces")) {
                     questionText = "Welche Figur lässt sich aus den folgenden Bausteinen zusammensetzen?";
                     isFigurenQuestion = true;
                 } else {
                     questionText = questionObj.toString();
                 }
 
                 // Page break for non-Figuren questions every 5 questions
                 if (!isFigurenQuestion) {
                     nonFigCounter++;
                 }
 
                 // For Figuren questions: existing page break logic
                 if (isFigurenQuestion) {
                     figurenCounter++;
                     if (figurenCounter > 3 && (figurenCounter - 1) % 3 == 0) {
                         addPageBreak(pkg);
                         isFirstQuestionOnPage = true; // Reset for new page
                     }
                 }
 
EOF
)