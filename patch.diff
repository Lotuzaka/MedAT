 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/main/java/WortfluessigkeitGenerator.java b/src/main/java/WortfluessigkeitGenerator.java
index 708cb4b6f675a2275e763bd0bdd4d0c267ebaafb..9401f1aa5158ec9c29383803a2ccf98ec2e5e0c3 100644
--- a/src/main/java/WortfluessigkeitGenerator.java
+++ b/src/main/java/WortfluessigkeitGenerator.java
@@ -48,52 +48,60 @@ public class WortfluessigkeitGenerator {
     public void execute(int numQuestions) throws IOException, SQLException {
         List<String> words = readWordList(WORDLIST_PATH);
         Collections.shuffle(words, random);
 
         int subId = questionDAO.getSubcategoryId(category, subcategory);
         int nextNr = questionDAO.getNextQuestionNumber(simulationId, subId);
 
         boolean autoCommit = conn.getAutoCommit();
         conn.setAutoCommit(false);
         try {
             for (int i = 0; i < numQuestions && i < words.size(); i++) {
                 String word = words.get(i).toUpperCase(Locale.GERMAN);
                 String scrambled = scramble(word);
                 char[] optionLetters = new char[4];
                 int correctIndex = fillOptions(word, optionLetters);
                 String questionText = toSpacedString(scrambled);
 
                 if (i < 5) {
                     MedatoninDB.debugLog("Wortfluessigkeit",
                             "ID " + nextNr + " | Word = \"" + word +
                                     "\" | Scramble = \"" + questionText +
                                     "\" | Correct = \"" + optionLetters[correctIndex] +
                                     "\" | Distraktoren = \"" + distractorString(optionLetters, correctIndex) + "\"");
                 }
 
-                int qId = questionDAO.insertQuestion(category, subcategory,
-                        questionText, nextNr++, simulationId);
+                int qId = questionDAO.insertQuestionWithShape(
+                        category,
+                        subcategory,
+                        nextNr++,
+                        questionText,
+                        simulationId,
+                        word,
+                        "WORD",
+                        null,
+                        null);
 
                 for (int j = 0; j < 5; j++) {
                     String label = (j == 4) ? "E" : String.valueOf((char) ('A' + j));
                     String text = (j == 4) ? "Keine Antwort ist richtig." :
                             "Anfangsbuchstabe: " + optionLetters[j];
                     boolean correct = j == correctIndex;
                     optionDAO.insertOption(qId, label, text, correct);
                 }
             }
             conn.commit();
         } finally {
             conn.setAutoCommit(autoCommit);
         }
     }
 
     /**
      * Reads all valid words from the given UTF-8 file. Only words with a length
      * between 7 and 9 characters are considered.
      */
     List<String> readWordList(String path) throws IOException {
         List<String> raw = new ArrayList<>();
         try (BufferedReader br = new BufferedReader(new InputStreamReader(
                 new java.io.FileInputStream(path), StandardCharsets.UTF_8))) {
             String line;
             while ((line = br.readLine()) != null) {
 
EOF
)