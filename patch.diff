 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/main/java/WortfluessigkeitGenerator.java b/src/main/java/WortfluessigkeitGenerator.java
index 9401f1aa5158ec9c29383803a2ccf98ec2e5e0c3..75f380eb63e75ab768bff93e3b40a136b213c8f0 100644
--- a/src/main/java/WortfluessigkeitGenerator.java
+++ b/src/main/java/WortfluessigkeitGenerator.java
@@ -74,57 +74,65 @@ public class WortfluessigkeitGenerator {
                         category,
                         subcategory,
                         nextNr++,
                         questionText,
                         simulationId,
                         word,
                         "WORD",
                         null,
                         null);
 
                 for (int j = 0; j < 5; j++) {
                     String label = (j == 4) ? "E" : String.valueOf((char) ('A' + j));
                     String text = (j == 4) ? "Keine Antwort ist richtig." :
                             "Anfangsbuchstabe: " + optionLetters[j];
                     boolean correct = j == correctIndex;
                     optionDAO.insertOption(qId, label, text, correct);
                 }
             }
             conn.commit();
         } finally {
             conn.setAutoCommit(autoCommit);
         }
     }
 
     /**
-     * Reads all valid words from the given UTF-8 file. Only words with a length
-     * between 7 and 9 characters are considered.
+     * Reads all valid words from the given list file.
+     *
+     * <p>The word list distributed with the project is encoded in
+     * ISO-8859-1. When reading it using UTF-8 the umlaut bytes become
+     * replacement characters, which bypasses the {@link #INVALID_CHARS}
+     * check. To ensure words containing umlauts are filtered out, we
+     * read the file using the correct encoding.</p>
+     *
+     * <p>Only words with a length between 7 and 9 characters are
+     * considered.</p>
      */
     List<String> readWordList(String path) throws IOException {
         List<String> raw = new ArrayList<>();
         try (BufferedReader br = new BufferedReader(new InputStreamReader(
-                new java.io.FileInputStream(path), StandardCharsets.UTF_8))) {
+                new java.io.FileInputStream(path), StandardCharsets.ISO_8859_1))) {
             String line;
             while ((line = br.readLine()) != null) {
                 raw.add(line.trim());
             }
         }
 
         Set<String> rawUpper = new HashSet<>();
         for (String r : raw) {
             rawUpper.add(r.toUpperCase(Locale.GERMAN));
         }
 
         List<String> out = new ArrayList<>();
         for (String w : raw) {
             String upper = w.toUpperCase(Locale.GERMAN);
             int len = upper.codePointCount(0, upper.length());
             if (len >= 7 && len <= 9 && isValidWord(upper, rawUpper)) {
                 out.add(upper);
             }
         }
         return out;
     }
 
     private static final Pattern INVALID_CHARS = Pattern.compile(".*[ÄÖÜäöüß].*");
     private static final Pattern DIMINUTIVE = Pattern.compile(".*(CHEN|LEIN)$", Pattern.CASE_INSENSITIVE);
     private static final Set<String> PROPER_NAMES = Set.of("ALDI", "DM", "BUNDESLIGA", "BUNDESREPUBLIK");
 
EOF
)